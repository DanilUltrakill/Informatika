using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Text;

namespace ConsoleApp2
{
    class RPN
    {
        static private bool IsDelimeter(char c)
        {
            if ((" =".IndexOf(c) != -1))
                return true;
            return false;
        }
        static private bool Oper(char с)
        {
            if (("+-/*^()cs!lt".IndexOf(с) != -1))
                return true;
            return false;
        }
        static private bool Functions(char с)
        {
            if (("()cs!lt".IndexOf(с) != -1))
                return true;
            return false;

        }
        static private double fuct(double a)
        {
            if (a <= 1)
            {
                return 1;
            }
            else
            {
                double c = a * fuct(a - 1);
                return c;
            }
        }
        static private byte GetPriority(char s)
        {
            switch (s)
            {
                case '(': return 0;
                case ')': return 1;
                case '+': return 2;
                case '-': return 3;
                case '*': return 4;
                case '/': return 4;
                case '^': return 5;
                case 'c': return 6;
                case 's': return 7;
                case '!': return 8;
                case 'l': return 9;
                case 't': return 10;
                default: return 11;
            }
        }
        static public double Calculate(string input)
        {
            string output = GetExpression(input);
            double result = Counting(output);
            return result;
        }
        static private string GetExpression(string input)
        {
            string output = string.Empty;
            Stack<char> operStack = new Stack<char>();

            for (int i = 0; i < input.Length; i++)
            {
                if (IsDelimeter(input[i]))
                    continue;

                if (input[i]=='-' && ((i>0 && !Char.IsDigit(input[i-1]) && input[i-1]!=')' && input[i - 1] != '!') || i==0))
                {
                    output += "0";
                    output += " ";
                    operStack.Push(input[i]);
                    i++;
                }

                if ((input[i]=='*' || input[i]=='/' || input[i]=='+') && (i==0))
                {
                    output += "0";
                    output += " ";
                    operStack.Push(input[i]);
                    i++;
                }

                if (Char.IsDigit(input[i]))
                {
                    while (!IsDelimeter(input[i]) && !Oper(input[i]))
                    {
                        output += input[i];
                        i++;

                        if (i == input.Length) break;
                    }

                    output += " ";
                    i--;
                }


                if (Oper(input[i]))
                {
                    if (input[i] == '(')
                        operStack.Push(input[i]);
                    else if (input[i] == ')')
                    {
                        char s = operStack.Pop();

                        while (s != '(')
                        {
                            output += s.ToString() + ' ';
                            s = operStack.Pop();
                        }
                    }
                    else
                    {
                        if (operStack.Count > 0)
                            if (GetPriority(input[i]) <= GetPriority(operStack.Peek()))
                                output += operStack.Pop().ToString() + " ";

                        operStack.Push(char.Parse(input[i].ToString()));

                    }
                    if (input[i] == 'c')
                    {
                        i += 2;
                    }
                }
            }


            while (operStack.Count > 0)
                output += operStack.Pop() + " ";

            return output;
        }

        static private double Counting(string input)
        {
            double result = 0;
            Stack<double> temp = new Stack<double>();

            for (int i = 0; i < input.Length; i++)
            {
                if (Char.IsDigit(input[i]))
                {
                    string a = string.Empty;

                    while (!IsDelimeter(input[i]) && !Oper(input[i]))
                    {
                        a += input[i];
                        i++;
                        if (i == input.Length) break;
                    }
                    temp.Push(double.Parse(a));
                    i--;
                }
                else if (Oper(input[i]))
                {                    
                        if (Functions(input[i]))
                        {
                            double d = temp.Pop();
                            switch (input[i])
                            {
                                case 's': result = double.Parse(Math.Sin(double.Parse(d.ToString())).ToString()); break;
                                case 'c': result = double.Parse(Math.Cos(double.Parse(d.ToString())).ToString()); break;
                                case '!': result = double.Parse(fuct(double.Parse(d.ToString())).ToString()); break;
                                case 'l': result = double.Parse(Math.Log10(double.Parse(d.ToString())).ToString()); break;
                                case 't': result = double.Parse(Math.Tan(double.Parse(d.ToString())).ToString()); break;
                                case '-': result = 0 - d; break;

                            }
                        }
                        else
                        {
                            double a = temp.Pop();
                            double b = temp.Pop();

                            switch (input[i])
                            {
                                case '+': result = b + a; break;
                                case '-': result = b - a; break;
                                case '*': result = b * a; break;
                                case '/': result = b / a; break;
                                case '^': result = double.Parse(Math.Pow(double.Parse(b.ToString()), double.Parse(a.ToString())).ToString()); break;

                            }
                        }
                    
                    temp.Push(result);
                }
            }

            if (temp.Count == 0)
                return 0;
            else
                return temp.Peek();
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            while (true)
            {
                Console.Write("¬ведите выражение: ");
                Console.WriteLine(RPN.Calculate(Console.ReadLine()));
            }
        }
    }
}